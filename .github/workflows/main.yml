name: Run Python Automation Script

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  run-python-script:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
        shell: powershell

      - name: Install Firefox
        run: choco install firefox -y
        shell: powershell

      - name: Install Geckodriver
        run: |
          $GECKO_URL = "https://github.com/mozilla/geckodriver/releases/download/v0.34.0/geckodriver-v0.34.0-win64.zip"
          Invoke-WebRequest -Uri $GECKO_URL -OutFile geckodriver.zip
          Expand-Archive geckodriver.zip -DestinationPath C:\GeckoDriver
          echo "C:\GeckoDriver" | Out-File -Encoding utf8 -Append $env:GITHUB_PATH
          C:\GeckoDriver\geckodriver.exe --version
        shell: powershell

      - name: Install OpenVPN
        run: choco install openvpn -y
        shell: powershell

      - name: Debug Repository Structure
        run: |
          Write-Output "Listing repository files..."
          Get-ChildItem -Path "${{ github.workspace }}" -Recurse
        shell: powershell

      - name: Select Random OpenVPN Configuration
        run: |
          $vpnDir = "${{ github.workspace }}\externals\VPNs"
          $authPath = Join-Path $vpnDir "auth.txt"
          $configs = Get-ChildItem $vpnDir -Filter *.ovpn | Select-Object -ExpandProperty FullName
          
          if ($configs.Count -eq 0) {
            Write-Error "No .ovpn config files found in $vpnDir"
            exit 1
          }

          $selectedConfig = Get-Random -InputObject $configs
          echo "Selected VPN config: $selectedConfig"

          echo "CONFIG_PATH=$selectedConfig" | Out-File -Encoding utf8 -Append $env:GITHUB_ENV
          echo "AUTH_PATH=$authPath" | Out-File -Encoding utf8 -Append $env:GITHUB_ENV
        shell: powershell

      - name: Start OpenVPN
        run: |
          if ((Test-Path "$env:CONFIG_PATH") -and (Test-Path "$env:AUTH_PATH")) {
              Write-Output "Starting OpenVPN..."
              Start-Process -FilePath "C:\Program Files\OpenVPN\bin\openvpn.exe" -ArgumentList "--config `"$env:CONFIG_PATH`" --auth-user-pass `"$env:AUTH_PATH`"" -NoNewWindow
              Write-Output "OpenVPN started."
          } else {
              Write-Error "VPN config or auth file not found!"
              exit 1
          }
        shell: powershell

      - name: Verify VPN Connection
        run: ipconfig | Select-String "VPN"
        shell: powershell

      - name: Create directory for service account file
        run: mkdir -p "Skip Tracing"
        shell: bash

      - name: Decode service-account_base64.txt to JSON
        shell: pwsh
        run: |
          $base64Content = Get-Content "Skip Tracing/service-account_base64.txt" -Raw
          if (-not $base64Content) {
            Write-Error "ERROR: service-account_base64.txt is empty or missing!"
            exit 1
          }

          [System.IO.File]::WriteAllBytes("Skip Tracing/service-account.json", [System.Convert]::FromBase64String($base64Content))

          try {
            Get-Content "Skip Tracing/service-account.json" | ConvertFrom-Json | Out-Null
          } catch {
            Write-Error "Decoded service-account.json is not valid JSON!"
            exit 1
          }

      - name: Remove expired OAuth token
        run: |
          if (Test-Path "Skip Tracing/token.json") {
            Remove-Item "Skip Tracing/token.json"
            Write-Output "Removed expired token.json"
          }
        shell: powershell

      - name: Verify script and files
        run: Get-ChildItem -Path "Skip Tracing" -Recurse
        shell: powershell

      - name: Run Python script
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: python "Skip Tracing/truppl_parser.py"
        shell: powershell
