name: Run Automated Python Scraping Tasks

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  run-scripts:
    runs-on: windows-latest
    env:
      TWO_CAPTCHA_API_KEY: ${{ secrets.TWO_CAPTCHA_API_KEY }}
      VPN_USERNAME: ${{ secrets.VPN_USERNAME }}
      VPN_PASSWORD: ${{ secrets.VPN_PASSWORD }}
      GOOGLE_CREDENTIALS_B64: ${{ secrets.GOOGLE_CREDENTIALS_B64 }}
      GOOGLE_TOKEN_B64: ${{ secrets.GOOGLE_TOKEN_B64 }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          playwright install chromium

      - name: Create OpenVPN Config Directory
        shell: pwsh
        run: |
          New-Item -Path "C:\Program Files\OpenVPN\config" -ItemType Directory -Force | Out-Null

      - name: Prepare VPN Auth File
        shell: pwsh
        run: |
          $authContent = "${{ env.VPN_USERNAME }}`n${{ env.VPN_PASSWORD }}"
          $authPath = "C:\Program Files\OpenVPN\config\auth.txt"
          Set-Content -Path $authPath -Value $authContent -Force

      - name: Decode Google Credentials
        shell: pwsh
        run: |
          [System.IO.File]::WriteAllBytes("credentials.json", [System.Convert]::FromBase64String("${{ env.GOOGLE_CREDENTIALS_B64 }}"))
          [System.IO.File]::WriteAllBytes("token.json", [System.Convert]::FromBase64String("${{ env.GOOGLE_TOKEN_B64 }}"))

      - name: Run Main Python Script
        shell: pwsh
        run: |
          python truppl_parser.py

      - name: Upload Log File on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logfile
          path: logfile.log