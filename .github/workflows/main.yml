name: Run Python Automation Script

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  run-python-script:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Clone full history

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Upgrade pip and Install dependencies from requirements.txt
        run: |
          python -m pip install --upgrade pip setuptools
          pip install -r requirements.txt
          # Debug: list installed packages to verify installation of key dependencies
          pip list
        shell: powershell

      - name: Install Google Chrome
        run: choco install googlechrome -y
        shell: powershell

      - name: Install ChromeDriver
        run: choco install chromedriver -y
        shell: powershell

      - name: Install OpenVPN
        run: choco install openvpn -y
        shell: powershell

      - name: Debug Repository Structure
        run: |
          Write-Output "Listing repository files..."
          Get-ChildItem -Path "${{ github.workspace }}" -Recurse
        shell: powershell

      - name: Set OpenVPN Configuration Paths
        run: |
          $configPath = "${{ github.workspace }}\externals\VPNs\us11597.nordvpn.com.tcp.ovpn"
          $authPath = "${{ github.workspace }}\externals\VPNs\auth.txt"
          
          if (-Not (Test-Path $configPath)) {
              Write-Error "ERROR: OpenVPN configuration file not found at $configPath!"
              exit 1
          }
          
          if (-Not (Test-Path $authPath)) {
              Write-Error "ERROR: OpenVPN authentication file not found at $authPath!"
              exit 1
          }
          
          echo "CONFIG_PATH=$configPath" | Out-File -Encoding utf8 -Append $env:GITHUB_ENV
          echo "AUTH_PATH=$authPath" | Out-File -Encoding utf8 -Append $env:GITHUB_ENV
        shell: powershell

      - name: Start OpenVPN Connection
        run: |
          if (Test-Path "C:\Program Files\OpenVPN\bin\openvpn.exe") {
              Write-Output "Starting OpenVPN..."
              
              if ((Test-Path "$env:CONFIG_PATH") -and (Test-Path "$env:AUTH_PATH")) {
                  # Use Start-Process so OpenVPN runs in the background on Windows (do not use --daemon)
                  Start-Process -FilePath "C:\Program Files\OpenVPN\bin\openvpn.exe" -ArgumentList "--config $env:CONFIG_PATH --auth-user-pass $env:AUTH_PATH" -NoNewWindow
                  Write-Output "OpenVPN started successfully."
              } else {
                  Write-Error "OpenVPN configuration or authentication file missing!"
                  exit 1
              }
          } else {
              Write-Error "OpenVPN executable not found!"
              exit 1
          }
        shell: powershell

      - name: Verify OpenVPN Connection
        run: |
          ipconfig | Select-String "VPN"
        shell: powershell

      - name: Create directory for service account file
        run: mkdir -p "Skip Tracing"
        shell: bash

      - name: Decode service-account_base64.txt to service-account.json
        shell: pwsh
        run: |
          $base64Content = Get-Content "Skip Tracing/service-account_base64.txt" -Raw
          if (-not $base64Content) {
              Write-Error "ERROR: service-account_base64.txt is empty or missing!"
              exit 1
          }
          [System.IO.File]::WriteAllBytes("Skip Tracing/service-account.json", [System.Convert]::FromBase64String($base64Content))
          try {
              Get-Content "Skip Tracing/service-account.json" | ConvertFrom-Json | Out-Null
          } catch {
              Write-Error "ERROR: Decoded service-account.json is not valid JSON!"
              exit 1
          }

      - name: Remove expired OAuth token
        run: |
          if (Test-Path "Skip Tracing/token.json") {
              Remove-Item "Skip Tracing/token.json"
              Write-Output "Removed expired token.json"
          }
        shell: powershell

      - name: Debug logs
        run: echo "Starting script execution at $(Get-Date)"
        shell: powershell

      - name: Verify script location
        run: Get-ChildItem -Path "Skip Tracing" -Recurse
        shell: powershell

      - name: Run Python script
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: python "Skip Tracing/truppl_parser.py"
