name: Run Automated Python Scraping Tasks with Docker

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  run-scripts:
    runs-on: ubuntu-latest
    env:
      TWO_CAPTCHA_API_KEY: ${{ secrets.TWO_CAPTCHA_API_KEY }}
      VPN_USERNAME: ${{ secrets.VPN_USERNAME }}
      VPN_PASSWORD: ${{ secrets.VPN_PASSWORD }}
      GOOGLE_CREDENTIALS_B64: ${{ secrets.GOOGLE_CREDENTIALS_B64 }}
      GOOGLE_TOKEN_B64: ${{ secrets.GOOGLE_TOKEN_B64 }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t python_scraper .

      - name: Ensure Log File Exists
        run: |
          mkdir -p "Skip Tracing"
          touch "Skip Tracing/logfile.log"

      - name: Run Script in Docker
        run: |
          docker run --rm \
            -e TWO_CAPTCHA_API_KEY="${{ secrets.TWO_CAPTCHA_API_KEY }}" \
            -e VPN_USERNAME="${{ secrets.VPN_USERNAME }}" \
            -e VPN_PASSWORD="${{ secrets.VPN_PASSWORD }}" \
            -e GOOGLE_CREDENTIALS_B64="${{ secrets.GOOGLE_CREDENTIALS_B64 }}" \
            -e GOOGLE_TOKEN_B64="${{ secrets.GOOGLE_TOKEN_B64 }}" \
            -v "${{ github.workspace }}/Skip Tracing/logfile.log:/app/Skip Tracing/logfile.log" \
            python_scraper bash -c "
              echo \"\$GOOGLE_CREDENTIALS_B64\" | base64 -d > /app/credentials.json &&
              echo \"\$GOOGLE_TOKEN_B64\" | base64 -d > /app/token.json &&
              xvfb-run python '/app/Skip Tracing/truppl_parser.py'
            "

      - name: Upload Log File on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logfile
          path: "Skip Tracing/logfile.log"
