name: Run Multiple Python Scripts

on:
  push:                     # Trigger workflow on code push
  workflow_dispatch:        # Allow manual triggering of the workflow

jobs:
  run-scripts:
    runs-on: ubuntu-latest   # Use Ubuntu-based runner
    environment: production

    strategy:
      matrix:
        script:              # Define scripts to run in the matrix
          - "Skip Tracing/truppl_parser.py"

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set Up Python Environment
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'   # Use Python 3.12

      # Step 3: Install Required System Packages
      - name: Install Required System Packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libnss3 \
            libgtk-3-0 \
            libgbm1 \
            libasound2t64 \
            libffi8 \
            libx264-dev \
            xvfb

      # Step 4: Install Python Dependencies
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install setuptools playwright google-auth google-auth-oauthlib google-auth-httplib2

      # Step 5: Install Playwright Browsers
      - name: Install Playwright Browsers
        run: playwright install

      # Step 6: Restore Credentials and Token Files
      - name: Restore Credentials and Token Files
        run: |
          echo "${{ secrets.GOOGLE_CREDENTIALS_B64 }}" | base64 -d > /home/runner/credentials.json
          echo "${{ secrets.GOOGLE_TOKEN_B64 }}" | base64 -d > /home/runner/token.json

      # Step 7: Debug Credentials and Token Files
      - name: Debug Credential and Token Files
        run: |
          echo "[*] Listing credential and token files:"
          ls -lh /home/runner/credentials.json /home/runner/token.json
          echo "[*] Checking the contents of credentials.json:"
          cat /home/runner/credentials.json || echo "[!] credentials.json is empty!"
          echo "[*] Checking the contents of token.json:"
          cat /home/runner/token.json || echo "[!] token.json is empty!"

      # Step 8: Set VPN and 2Captcha API Credentials as Environment Variables
      - name: Set Environment Variables
        run: |
          echo "VPN_USERNAME=${{ secrets.VPN_USERNAME }}" >> $GITHUB_ENV
          echo "VPN_PASSWORD=${{ secrets.VPN_PASSWORD }}" >> $GITHUB_ENV
          echo "TWO_CAPTCHA_API_KEY=${{ secrets.TWO_CAPTCHA_API_KEY }}" >> $GITHUB_ENV

      # Step 9: Validate Environment Variables (Optional Debugging)
      - name: Validate Environment Variables
        run: |
          if [ -z "$TWO_CAPTCHA_API_KEY" ]; then
            echo "[!] TWO_CAPTCHA_API_KEY is not set!";
            exit 1;
          else
            echo "[✓] TWO_CAPTCHA_API_KEY is set!";
          fi

      # Step 10: Verify Credentials and Token Files (Optional Debugging)
      - name: Validate Credentials Files
        run: |
          if [ ! -f /home/runner/credentials.json ]; then
            echo "[!] Credentials file not found!";
            exit 1;
          fi
          if [ ! -f /home/runner/token.json ]; then
            echo "[!] Token file not found!";
            exit 1;
          fi
          echo "[✓] Credentials and token files verified."

      # Step 11: Run Playwright Script
      - name: Run Playwright Script
        run: xvfb-run --auto-servernum --server-args="-screen 0 1920x1080x24" python "${{ matrix.script }}"
