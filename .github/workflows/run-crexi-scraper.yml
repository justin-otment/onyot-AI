name: Run Crexi Scraper

on:
  workflow_dispatch:
  schedule:
    - cron: '0 14 * * *'  # 2PM UTC daily

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install selenium gspread google-auth google-auth-oauthlib fake_useragent

      - name: Install Firefox & geckodriver
        run: |
          sudo apt-get update
          sudo apt-get install -y firefox
          GECKO_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | jq -r '.tag_name')
          wget https://github.com/mozilla/geckodriver/releases/download/${GECKO_VERSION}/geckodriver-${GECKO_VERSION}-linux64.tar.gz
          tar -xzf geckodriver-${GECKO_VERSION}-linux64.tar.gz
          chmod +x geckodriver
          sudo mv geckodriver /usr/local/bin/

      - name: Set up Google OAuth credentials
        run: |
          mkdir -p gcreds
          # For credentials.json: prefer raw JSON; if not present try the base64 version.
          if [ -n "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" ]; then
            printf '%s' "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" > gcreds/credentials.json
          else
            printf '%s' "$(echo "${{ secrets.GOOGLE_CREDENTIALS_JSON_BASE64 }}" | base64 -d)" > gcreds/credentials.json
          fi

          # For token.json: similar approach. Prefer raw JSON, else decode base64 if available.
          if [ -n "${{ secrets.GOOGLE_TOKEN_JSON }}" ]; then
            printf '%s' "${{ secrets.GOOGLE_TOKEN_JSON }}" > gcreds/token.json
          else
            printf '%s' "$(echo "${{ secrets.GOOGLE_TOKEN_JSON_BASE64 }}" | base64 -d)" > gcreds/token.json
          fi

          # Optional validation: remove if exposing sensitive data is a concern
          jq empty gcreds/credentials.json
          jq empty gcreds/token.json

      # Optionally, for debugging purposes, print out token.json (remove after validation)
      # - name: Debug token.json content
      #   run: |
      #     echo "Contents of gcreds/token.json:"
      #     cat gcreds/token.json

      - name: Run CREXi scraper
        run: python externals/Zillow/crexiLoop.py
