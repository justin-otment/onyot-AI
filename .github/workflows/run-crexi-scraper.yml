name: Google OAuth Setup and Run CREXi Scraper

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  setup-and-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get install -y jq

      - name: Install Firefox & geckodriver
        run: |
          sudo apt-get update
          sudo apt-get install -y firefox
          GECKO_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | jq -r '.tag_name')
          wget https://github.com/mozilla/geckodriver/releases/download/${GECKO_VERSION}/geckodriver-${GECKO_VERSION}-linux64.tar.gz
          tar -xzf geckodriver-${GECKO_VERSION}-linux64.tar.gz
          chmod +x geckodriver
          sudo mv geckodriver /usr/local/bin/

      - name: Set up Google OAuth credentials
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p gcreds

          # Save credentials.json
          echo "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" > gcreds/credentials.json
          if ! jq empty gcreds/credentials.json 2>/dev/null; then
            echo "‚ö†Ô∏è credentials.json is not valid JSON. Trying base64 decode..."
            echo "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" | base64 -d > gcreds/credentials.json || {
              echo "‚ùå Base64 decoding failed for credentials.json"
              exit 1
            }
          fi

          # Save token.json
          echo "${{ secrets.GOOGLE_TOKEN_JSON }}" > gcreds/token.json
          if ! jq empty gcreds/token.json 2>/dev/null; then
            echo "‚ö†Ô∏è token.json is not valid JSON. Trying base64 decode..."
            echo "${{ secrets.GOOGLE_TOKEN_JSON }}" | base64 -d > gcreds/token.json || {
              echo "‚ùå Base64 decoding failed for token.json"
              exit 1
            }
          fi

          echo "‚úÖ Google OAuth credentials successfully configured"

      - name: Refresh Google OAuth token
        shell: bash
        run: |
          python - <<'EOF'
          import json
          from google.oauth2.credentials import Credentials
          from google.auth.transport.requests import Request

          token_path = "gcreds/token.json"
          with open(token_path, "r") as f:
              token_info = json.load(f)

          creds = Credentials.from_authorized_user_info(token_info, scopes=["https://www.googleapis.com/auth/spreadsheets"])
          if creds.expired or not creds.valid:
              print("üîÑ Token is expired or invalid. Refreshing...")
              creds.refresh(Request())
              with open(token_path, "w") as f:
                  json.dump(json.loads(creds.to_json()), f, indent=2)
              print("‚úÖ Token refreshed successfully.")
          else:
              print("‚úÖ Token is still valid.")
          EOF

      - name: Run CREXi scraper
        run: python externals/Zillow/crexiLoop.py

      - name: Log updated token
        if: always()
        run: |
          echo "üìú Updated token.json:"
          cat gcreds/token.json

      - name: Commit refreshed token (optional)
        if: always()
        run: |
          git config --global user.email "github-actions@users.noreply.github.com"
          git config --global user.name "GitHub Actions"
          git add gcreds/token.json
          git diff --cached --quiet || git commit -m "üîÑ Auto-update token.json"
          git push || echo "‚ö†Ô∏è Push failed (likely due to permissions)"
